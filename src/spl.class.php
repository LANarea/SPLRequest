<?php
namespace LANarea;

/**
 * Studio Playlist Request Class
 *
 * @author Ken Verhaegen <contact@kenverhaegen.be>
 * @copyright 2014 LANarea
 * @license BSD-3-Clause
 */
class SPLRequest
{
    
    private $server_ip = null;
    private $server_port = null;
    
    public function __construct($server_ip, $server_port)
    {
        $this->setIp($server_ip);
        $this->setPort($server_port);
    }
    
    public function getAllSongs()
    {
        return $this->search('*'); // Simple, huh?
    }
    
    public function search($s)
    {
        return $this->processSongs($this->doQuery('Search=' . $s, 'Not Found'));
    }
    
    private function processSongs($songs)
    {
        if(!is_array($songs)) return $songs;
    
        $newList = array();
        
        for ($i = 0; $i < count($songs); $i++)
        {
            if (empty($songs[$i]))
                next;
            list($artist, $title, $filepath) = explode("|", $songs[$i]);
            $newList[] = array(
                'artist' => $artist,
                'title' => $title,
                'filepath' => $filepath
            );
        }
        return $newList;
    }
    
    public function getRequests()
    {
        return $this->processRequests($this->doQuery('List requests', 'OK'));
    }
    
    private function processRequests($requests)
    {
        $newList = array();
        
        for ($i = 0; $i < count($requests); $i++)
        {
            if (empty($requests[$i]))
                next;
            list($timestamp, $artist, $title) = explode("|", $requests[$i]);
            $newList[] = array(
                'ts' => $timestamp,
                'artist' => $artist,
                'title' => $title
            );
        }
        return $newList;
    }
    
    public function doRequest($filepath = "", $name = "", $location = "")
    {
        if (NULL !== $filepath)
        {
            return false;
        }
        
        $command = "Insert Request=" . $filepath . "|" . $_SERVER["REMOTE_ADDR"];
        if ($name || $location)
        {
            $command .= '|' . $name . '|' . $location;
        }
        
        // To be continued (Need to check the output of doQuery)
        
        return doQuery($command,true);
    }
    
    public function setIp($server_ip)
    {
        $this->server_ip = $server_ip;
        return true;
    }
    
    public function setPort($server_port)
    {
        $this->server_port = $server_port;
        return true;
    }
    
    private function doQuery($command = null, $multi = false)
    {
    
        if (NULL !== $command)
        {
            $command .= "\r\n"; // Adding the vital NewLine to the given command
            $fp = fsockopen($this->server_ip, $this->server_port, $errno, $errstr, 10);
            if ($fp !== false)
            {
                fwrite($fp, $command);
                $buffer = trim(fgets($fp));
                if($multi === true || is_string($multi))
                {
                    $stopmsg = is_string($multi) ? $multi : "OK";
                    while (!empty($buffer) && ($buffer != $stopmsg))
                    {
                        $data[] = $buffer;
                        $buffer = trim(fgets($fp));
                    }
                }
                else
                {
                    $data = $buffer;
                    // $data = fgets ($fp);
                }
                fclose($fp);
            }
            else
            {
                throw new SPLRequestException('SPLRequest Error\r\n' . $errno . ': ' . $errstr . '\r\n');
            }
        }
        else
        {
            throw new SPLRequestException('No valid command given.');
        }
        
        return $data;
    }
    
}

/**
 * An exception generated by SPLRequest.
 */
class SPLRequestException extends \Exception
{
}